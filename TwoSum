# Python
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        hash = {};
        for i in range(len(nums)):
            if target - nums[i] in hash and i != hash[target - nums[i]]:
                return [i, hash[target - nums[i]]]
            hash[nums[i]] = i
            
// Javascript
/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 */
var twoSum = function(nums, target) {
    let hash = {};    
    for (i = 0; i < nums.length; i++) {
        // if not in hashtable, check if target - nums[i] is in hash table
        if ((target - nums[i]) in hash) {
            return [i, hash[target - nums[i]]];
        }
        if (!(nums[i] in hash)) {   
            hash[nums[i]] = i;
        }
    }
};

var twoSum = (nums, target) => {
  // create obj
  var obj = {};
  // loop through nums
  for (let i = 0; i < nums.length; i++) {
  // if target - current is in obj, return the indices of the two numbers!
    let complement = target - nums[i];
    if (complement in obj) {
      return [i, obj[complement]];
    }
    // otherwise add current to obj
    obj[nums[i]] = i;
  }
};
